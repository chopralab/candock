#!/usr/bin/env bash

# Load default variables

: ${MCANDOCK_PATH:=@CMAKE_INSTALL_PREFIX@}
: ${MCANDOCK_VER:=v@CANDOCK_MAJOR_VERSION@.@CANDOCK_MINOR_VERSION@.@CANDOCK_TWEAK_VERSION@}

: ${MCANDOCK_SUP_PATH:=@CMAKE_INSTALL_PREFIX@}

: ${MCANDOCK_frag_separator:=$MCANDOCK_MOD_PATH/splitfragments.pl}

: ${MCANDOCK_extractor:=$MCANDOCK_MOD_PATH/extract_candock_to_scores_and_models.pl}
: ${MCANDOCK_poses:=1}
: ${MCANDOCK_pymol:=/depot/gchopra/apps/pymol/pymol}

: ${CANDOCK_bslib:=$MCANDOCK_SUP_PATH/bslibdb/bslib.txt}
: ${CANDOCK_names:=$MCANDOCK_SUP_PATH/bslibdb/data/names}
: ${CANDOCK_bio:=$MCANDOCK_SUP_PATH/bslibdb/data/bio}

: ${CANDOCK_amber_xml:=$MCANDOCK_SUP_PATH/data/amber10.xml}
: ${CANDOCK_water_xml:=$MCANDOCK_SUP_PATH/data/tip3p.xml}
: ${CANDOCK_gaff_xml:=$MCANDOCK_SUP_PATH/data/gaff.xml}
: ${CANDOCK_gaff_dat:=$MCANDOCK_SUP_PATH/data/gaff.dat}

: ${CANDOCK_dist:=$MCANDOCK_SUP_PATH/data/csd_complete_distance_distributions.txt}
: ${CANDOCK_obj_dir:=$MCANDOCK_SUP_PATH/obj}

# Check if were running in a PBS environment

if [[ ! -z $PBS_O_WORKDIR ]]
then
        : ${MCANDOCK_working_dir:=$PBS_O_WORKDIR}
else
        : ${MCANDOCK_working_dir:=$PWD}
fi

function get_option() {
        $MCANDOCK_PATH/$MCANDOCK_VER/cd_check_options | grep '=' | grep -w $1 | awk -F '=' '{ print $2}' | sed -e 's/\s*//'
}

function find_centroids() {

    if [[ -s `get_option centroid` ]]
    then
        echo "Existing binding site found in `get_option centroid`"
        return
    fi

    touch find_centroids.lck
    SECONDS=0

    $MCANDOCK_PATH/$MCANDOCK_VER/cd_bsite_probis

    echo "find_centroids took $SECONDS seconds to complete"
    rm find_centroids.lck

    chmod g+r `get_option centroid`
    chmod g+r `get_option gridpdb_hcp`
    chmod g+r `get_option json`
    chmod g+r `get_option nosql`
    chmod g+r `get_option jsonwl`
    chmod g+r `get_option lig_clus_file`
    chmod g+r `get_option z_scores_file`
}

function prep_fragments() {

    if [[ -s `get_option prep` ]]
    then
        echo "Existing fragmentation found in `get_option prep`"
        return
    fi

    cd $MCANDOCK_working_dir
    echo "Running fragment in $PWD"

    touch prep_fragments.lck
    SECONDS=0

    $MCANDOCK_PATH/$MCANDOCK_VER/cd_prep_fragments

    echo "Fragmenting took $SECONDS seconds to complete"
    rm prep_fragments.lck

    chmod g+r `get_option prep`
    chmod g+r `get_option seeds`
}

function dock_fragments() {

    if [[ -d `get_option top_seeds_dir` ]]
    then
        echo "Seeds database found at `get_option top_seeds_dir`"
        return
    fi

    cd $MCANDOCK_working_dir
    echo "Running dock in $PWD"

    touch dock_fragments.lck
    SECONDS=0

    $MCANDOCK_PATH/$MCANDOCK_VER/cd_dock_fragments

    echo "Docking of fragments took $SECONDS seconds to complete"
    rm dock_fragments.lck

    chmod -R g+r `get_option top_seeds_dir`
}

function link_fragments() {

    if [[ -d `get_option docked_dir` ]]
    then
        echo "Seeds database found at `get_option top_seeds_dir`"
        return
    fi

    cd $MCANDOCK_working_dir
    echo "Running link in $PWD"

    touch link_fragments.lck
    SECONDS=0

    $MCANDOCK_PATH/$MCANDOCK_VER/cd_link_fragments

    echo "Linking of fragments took $SECONDS seconds to complete"
    rm link_fragments.lck

    chmod -R g+r docked/
}

function extract_result() {
    cd $MCANDOCK_working_dir
    echo "Running extract in $PWD"

    mkdir extract
    cd extract

    perl $MCANDOCK_extractor $([[ "$MCANDOCK_MAKE_PYMOL" -eq 0 ]] && echo -f) -n $MCANDOCK_poses ../docked/*.pdb > ../scores.csv

    if [[ "$MCANDOCK_MAKE_PYMOL" -ne 0 ]]
        $MCANDOCK_pymol -c create_pse.py
        mv all.pse ..
    fi

    cd ..
    rm -fr extract

    chmod g+r scores.csv
    chmod g+r all.pse
}
