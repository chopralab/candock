#ifndef OPENMM_SPLINEFITTER_H_
#define OPENMM_SPLINEFITTER_H_

/* -------------------------------------------------------------------------- *
 *                                   OpenMM                                   *
 * -------------------------------------------------------------------------- *
 * This is part of the OpenMM molecular simulation toolkit originating from   *
 * Simbios, the NIH National Center for Physics-Based Simulation of           *
 * Biological Structures at Stanford, funded under the NIH Roadmap for        *
 * Medical Research, grant U54 GM072970. See https://simtk.org.               *
 *                                                                            *
 * Portions copyright (c) 2010 Stanford University and the Authors.           *
 * Authors: Peter Eastman                                                     *
 * Contributors:                                                              *
 *                                                                            *
 * Permission is hereby granted, free of charge, to any person obtaining a    *
 * copy of this software and associated documentation files (the "Software"), *
 * to deal in the Software without restriction, including without limitation  *
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,   *
 * and/or sell copies of the Software, and to permit persons to whom the      *
 * Software is furnished to do so, subject to the following conditions:       *
 *                                                                            *
 * The above copyright notice and this permission notice shall be included in *
 * all copies or substantial portions of the Software.                        *
 *                                                                            *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    *
 * THE AUTHORS, CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,    *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR      *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE  *
 * USE OR OTHER DEALINGS IN THE SOFTWARE.                                     *
 * -------------------------------------------------------------------------- */

#include "windowsExport.h"
#include <vector>

namespace OpenMM {

/**
 * SplineFitter provides routines for performing cubic spline interpolation.
 */

class OPENMM_EXPORT SplineFitter {
public:
    /**
     * Fit a natural cubic spline to a set of data points.  The resulting spline interpolates all the
     * data points, has a continuous second derivative everywhere, and has a second derivative of 0 at
     * its end points.
     *
     * @param x      the values of the independent variable at the data points to interpolate.  They must
     *               be strictly increasing: x[i] > x[i-1].
     * @param y      the values of the dependent variable at the data points to interpolate
     * @param deriv  on exit, this contains the second derivative of the spline at each of the data points
     */
    static void createNaturalSpline(const std::vector<double>& x, const std::vector<double>& y, std::vector<double>& deriv);
    /**
     * Fit a periodic cubic spline to a set of data points.  The resulting spline interpolates all the
     * data points, has a continuous second derivative everywhere, and has identical second derivatives
     * at the end points.
     *
     * @param x      the values of the independent variable at the data points to interpolate.  They must
     *               be strictly increasing: x[i] > x[i-1].
     * @param y      the values of the dependent variable at the data points to interpolate.  The first and
     *               last entries must be identical.
     * @param deriv  on exit, this contains the second derivative of the spline at each of the data points
     */
    static void createPeriodicSpline(const std::vector<double>& x, const std::vector<double>& y, std::vector<double>& deriv);
    /**
     * Evaluate a spline generated by one of the other methods in this class.
     *
     * @param x     the values of the independent variable at the data points to interpolate
     * @param y     the values of the dependent variable at the data points to interpolate
     * @param deriv the vector of second derivatives that was calculated by one of the other methods
     * @param t     the value of the independent variable at which to evaluate the spline
     * @return the value of the spline at the specified point
     */
    static double evaluateSpline(const std::vector<double>& x, const std::vector<double>& y, const std::vector<double>& deriv, double t);
    /**
     * Evaluate the derivative of a spline generated by one of the other methods in this class.
     *
     * @param x     the values of the independent variable at the data points to interpolate
     * @param y     the values of the dependent variable at the data points to interpolate
     * @param deriv the vector of second derivatives that was calculated by one of the other methods
     * @param t     the value of the independent variable at which to evaluate the spline
     * @return the value of the spline's derivative  at the specified point
     */
    static double evaluateSplineDerivative(const std::vector<double>& x, const std::vector<double>& y, const std::vector<double>& deriv, double t);
private:
    static void solveTridiagonalMatrix(const std::vector<double>& a, const std::vector<double>& b, const std::vector<double>& c, const std::vector<double>& rhs, std::vector<double>& sol);
};

} // namespace OpenMM

#endif /*OPENMM_SPLINEFITTER_H_*/
